<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:is="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
    xmlns:app="clr-namespace:Liberfy"
    xmlns:conv="clr-namespace:Liberfy.Converter">

    <conv:BoolInverter x:Key="BoolInverter" />

    <Style x:Key="ImageButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter
                        Clip="{TemplateBinding Clip}"
                        ClipToBounds="{TemplateBinding ClipToBounds}"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        ContentSource="Content" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TimelineImageButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="#AAAAAAAA" />
        <Setter Property="BorderBrush" Value="#AAAAAAAA" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            ContentSource="Content" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.87" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SimpleContentButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Border Background="{TemplateBinding Background}">
            <ContentPresenter
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
        </Border>
    </ControlTemplate>

    <Style x:Key="ColumnPanelToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="#666" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        Padding="{TemplateBinding Padding}">
                        <Path
                            x:Name="path"
                            Fill="#666"
                            Stretch="Uniform"
                            Data="{StaticResource FontAwesome.Icon.ChevronDown}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#AADDDDDD" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#AAAAAAAA" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="path" Property="Data" Value="{StaticResource FontAwesome.Icon.ChevronUp}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColumnPanelButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#666" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Content" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#AADDDDDD" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#AAAAAAAA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActionIconPath" TargetType="{x:Type Path}">
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=ButtonBase}}" />
    </Style>

    <Style x:Key="ActionButton" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="RenderOptions.CachingHint" Value="Cache" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Opacity" Value=".6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource SimpleContentButtonTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="#222" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1.0" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".8" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ReplyActionButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ActionButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#07c" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ActionToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="RenderOptions.CachingHint" Value="Cache" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Opacity" Value=".6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource SimpleContentButtonTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Foreground" Value="#222" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1.0" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RetweetActionToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ActionToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Green" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavoriteActionToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ActionToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="UserNameLinkText" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="#000" />
        <Setter Property="TextDecorations" Value="None" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MetadataLinkText" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="#888" />
        <Setter Property="TextDecorations" Value="None" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HyperlinkText" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="UserNameTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>

    <Style x:Key="QuotedTweetButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Height" Value="auto" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="8,0,0,0" />
        <Setter Property="BorderBrush" Value="#AACCCCCC" />
        <Setter Property="Background" Value="#AAEEEEEE" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#EECCCCCC" />
                            <Setter TargetName="border" Property="Background" Value="#EEEAEAEA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Thickness x:Key="TimelineItemEntityMargin">4 0 4 4</Thickness>

    <DataTemplate x:Key="EmptyDataTemplate" />

    <Style x:Key="SimpleButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="#FF3E93F9" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Padding" Value="8 3" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Border
                            x:Name="border"
                            Background="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="#7777">
                            <ContentPresenter
                                x:Name="content"
                                Opacity="1.0"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="Content"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#3777" />
                            <Setter TargetName="border" Property="Background" Value="#3fff" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#3000" />
                            <Setter TargetName="border" Property="Background" Value="#3777" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="BorderBrush" Value="#4fff" />
                            <Setter TargetName="border" Property="Background" Value="#6fff" />
                            <Setter TargetName="content" Property="Opacity" Value="0.9" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Thickness x:Key="BottomThickness" Bottom="1" />

    <ItemContainerTemplate x:Key="ItemsContainerStyle">
        <VirtualizingStackPanel />
    </ItemContainerTemplate>

    <Style x:Key="ToolBarBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource BottomThickness}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ToolBarForeground}" />
    </Style>

    <Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="Height" Value="32" />
        <Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BottomThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ToolBarForeground}" />
    </Style>

    <!--#region GeometryIcon style -->

    <Style x:Key="{x:Type app:GeometryIcon}" TargetType="{x:Type app:GeometryIcon}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Fill" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type Control}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type app:GeometryIcon}">
                    <Path
                        Stretch="Uniform"
                        Fill="{TemplateBinding Fill}"
                        Data="{TemplateBinding Data}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Window style -->

    <Style x:Key="CaptionButtonBase" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="29" />
   </Style>

    <Style x:Key="NormalCaptionButton" TargetType="Button" BasedOn="{StaticResource CaptionButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch">
                        <Path
                            x:Name="presenter"
                            Stretch="None"
                            Width="10" Height="10"
                            UseLayoutRounding="True"
                            SnapsToDevicePixels="True"
                            RenderOptions.EdgeMode="Aliased"
                            Stroke="{TemplateBinding Foreground}"
                            StrokeThickness="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{TemplateBinding Content}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2DEEF7FF" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#4BF7FFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="presenter" Property="Stroke" Value="#66FFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalCaptionCloseButton" TargetType="Button" BasedOn="{StaticResource CaptionButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        Background="Transparent">
                        <Path
                            x:Name="presenter"
                            Width="10" Height="10"
                            UseLayoutRounding="True"
                            SnapsToDevicePixels="True"
                            RenderOptions.EdgeMode="Unspecified"
                            Stretch="Uniform"
                            Stroke="{TemplateBinding Foreground}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Data="{TemplateBinding Content}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#EFEE001B" />
                            <Setter TargetName="presenter" Property="Stroke" Value="#FFFFFFFF" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#B7C0000D" />
                            <Setter TargetName="presenter" Property="Stroke" Value="#FFFFFFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="presenter" Property="Stroke" Value="#66FFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="GroupItemTemplate" TargetType="{x:Type GroupItem}">
        <StackPanel>
            <Label
                DockPanel.Dock="Top"
                Padding="6,4"
                FontWeight="Bold"
                TabIndex="0"
                IsTabStop="False"
                BorderBrush="Gainsboro"
                BorderThickness="{StaticResource BottomOnlyThickness}"
                Content="{TemplateBinding Content}"
                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                <Label.Background>
                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                        <GradientStop Color="#FFE6E6E6"/>
                        <GradientStop Color="#FFF1F1F1" Offset="1"/>
                    </LinearGradientBrush>
                </Label.Background>
            </Label>

            <ItemsPresenter
                KeyboardNavigation.TabNavigation="Once" />
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="GroupItemStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template" Value="{StaticResource GroupItemTemplate}" />
    </Style>

    <ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type app:CustomWindow}">
        <Border
            x:Name="PART_Container"
            Background="{TemplateBinding Background}">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <Grid
                    x:Name="PART_TitleBarPanel"
                    DockPanel.Dock="Top"
                    Background="Transparent"
                    Height="{TemplateBinding CaptionHeight}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <ContentPresenter
                        x:Name="PART_TitleBarContent"
                        Content="{TemplateBinding TitleBarContent}"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch" />

                    <StackPanel
                        Grid.Column="2"
                        Orientation="Horizontal"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Height="29"
                        app:CustomWindow.IsHitTestVisible="True" >
                        <Button
                            x:Name="PART_MinimizeButton"
                            Content="{StaticResource Icon.Minimize}"
                            ToolTip="最小化"
                            Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                            Style="{StaticResource NormalCaptionButton}" />

                        <Button
                            x:Name="PART_MaximizeButton"
                            Content="{StaticResource Icon.Maximize}"
                            ToolTip="最大化"
                            Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                            Style="{StaticResource NormalCaptionButton}" />

                        <Button
                            x:Name="PART_RestoreButton"
                            Content="{StaticResource Icon.Restore}"
                            ToolTip="元に戻す"
                            Command="{x:Static SystemCommands.RestoreWindowCommand}"
                            Style="{StaticResource NormalCaptionButton}" />

                        <Button
                            x:Name="PART_CloseButton"
                            Content="{StaticResource Icon.Close}"
                            ToolTip="閉じる"
                            Command="{x:Static SystemCommands.CloseWindowCommand}"
                            Style="{StaticResource NormalCaptionCloseButton}" />
                    </StackPanel>

                    <Border
                        x:Name="PART_ActionButtonBorderTop"
                        Grid.Column="3"
                        Background="Transparent"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        app:CustomWindow.IsHitTestVisible="False" />

                    <Border
                        x:Name="PART_ActionButtonBorderRight"
                        Grid.Column="3"
                        Background="Transparent"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Stretch"
                        app:CustomWindow.IsHitTestVisible="False" />
                </Grid>

                <AdornerDecorator Grid.Row="1">
                    <ContentPresenter />
                </AdornerDecorator>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="{x:Type app:CustomWindow}" TargetType="{x:Type app:CustomWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="TitleBarContent">
            <Setter.Value>
                <Grid
                    Height="30"
                    VerticalAlignment="Top">
                    <TextBlock
                        Margin="8,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding Title, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Window}}" />
                </Grid>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource CustomWindowTemplate}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="TitleBarActiveBackground" Value="{StaticResource Window.TitleBar.Active.Background}" />
        <Setter Property="TitleBarInactiveBackground" Value="{StaticResource Window.TitleBar.Inactive.Background}" />
        <!--<Setter Property="ActiveBorderBrush" Value="{StaticResource Window.Active.BorderBrush}" />-->
        <!--<Setter Property="InactiveBorderBrush" Value="{StaticResource Window.Inactive.BorderBrush}" />-->
        <Setter Property="TitleBarActiveForeground" Value="{StaticResource Window.TitleBar.Active.Foreground}" />
        <Setter Property="TitleBarInactiveForeground" Value="{StaticResource Window.TitleBar.Inactive.Foreground}" />
    </Style>

    <!--#endregion-->

    <!--#region Additional Controls -->

    <Style TargetType="{x:Type app:PopupDecorator}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="0, 4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type app:PopupDecorator}">
                    <Grid Margin="10, 0, 10, 10">
                        <Grid.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="10" Opacity=".3" />
                        </Grid.Effect>

                        <Border
                            Padding="{TemplateBinding Padding}" Margin="0, 10, 0, 0"
                            Background="#FDFDFD"
                            BorderThickness="1" BorderBrush="#BBB">

                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </Border>

                        <Polygon
                            x:Name="arrow_1"
                            Margin="10, 0, 10, 0"
                            Width="20" Height="10"
                            VerticalAlignment="Top" HorizontalAlignment="Left"
                            Fill="#BBB">
                            <Polygon.Points>
                                <Point>10, 0</Point>
                                <Point>20,10</Point>
                                <Point>0 ,10</Point>
                            </Polygon.Points>
                        </Polygon>

                        <Polygon 
                            x:Name="arrow_2"
                            Margin="10, 1, 10, 0"
                            Width="20" Height="10"
                            VerticalAlignment="Top" HorizontalAlignment="Left"
                            Fill="#FDFDFD">
                            <Polygon.Points>
                                <Point>10, 0</Point>
                                <Point>20,10</Point>
                                <Point>0 ,10</Point>
                            </Polygon.Points>
                        </Polygon>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRightBalloon" Value="True">
                            <Setter TargetName="arrow_1" Property="HorizontalAlignment" Value="Right" />
                            <Setter TargetName="arrow_2" Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <ControlTemplate
        x:Key="WizardPanelTemplate"
        TargetType="{x:Type app:WizardPanel}">
        <Border
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                
                <Border
                    Grid.Row="1"
                    DockPanel.Dock="Bottom"
                    Padding="5"
                    Background="{TemplateBinding ButtonPanelBackground}">
                    <StackPanel
                        Orientation="Horizontal"
                        HorizontalAlignment="Right">
                        <app:BusyIndicator
                            Margin="0 0 8 0"
                            Width="18" Height="18"
                            VerticalAlignment="Center"
                            IsBusy="{TemplateBinding IsBusy}"
                            Visibility="{TemplateBinding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Button
                            x:Name="PART_PreviousButton"
                            Margin="4" Padding="18,4"
                            Content="前へ(_P)"
                            Command="{TemplateBinding PreviousCommand}"
                            Visibility="{TemplateBinding IsShowPreviousButton, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Button
                            x:Name="PART_NextButton"
                            Margin="4" Padding="18,4"
                            Content="次へ(_N)"
                            Command="{TemplateBinding NextCommand}"
                            Visibility="{TemplateBinding IsShowNextButton, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Button
                            x:Name="PART_CancelButton"
                            Margin="4" Padding="18,4"
                            Content="閉じる(_C)"
                            Command="{TemplateBinding CancelCommand}"
                            Visibility="{TemplateBinding IsShowCancelButton, Converter={StaticResource BoolToVisibilityConverter}}" />
                    </StackPanel>
                </Border>
                
                <ContentPresenter
                    x:Name="PART_SelectedContentHost"
                    Grid.Row="0"
                    Margin="{TemplateBinding Padding}"
                    ContentSource="SelectedContent"
                    ContentStringFormat="{TemplateBinding ItemStringFormat}"
                    ContentTemplate="{TemplateBinding ItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEmphasisPreviousButton" Value="True">
                <Setter TargetName="PART_PreviousButton" Property="Style" Value="{StaticResource Button.Primary}" />
            </Trigger>
            
            <Trigger Property="IsEmphasisNextButton" Value="True">
                <Setter TargetName="PART_NextButton" Property="Style" Value="{StaticResource Button.Primary}" />
            </Trigger>

            <Trigger Property="IsEmphasisCancelButton" Value="True">
                <Setter TargetName="PART_CancelButton" Property="Style" Value="{StaticResource Button.Danger}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="{x:Type app:WizardPanel}"
        TargetType="{x:Type app:WizardPanel}">
        <Setter Property="ButtonPanelBackground" Value="#EEEEEE" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{StaticResource WizardPanelTemplate}" />
    </Style>

</ResourceDictionary>
