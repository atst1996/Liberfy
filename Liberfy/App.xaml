<Application
	x:Class="Liberfy.App"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:cm="clr-namespace:System.ComponentModel;assembly=System"
	xmlns:conv="clr-namespace:Liberfy.Converter"
	xmlns:local="clr-namespace:Liberfy"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:tb="http://www.hardcodet.net/taskbar"
	xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:vm="clr-namespace:Liberfy.ViewModel"
	xmlns:is="http://schemas.microsoft.com/expression/2010/interactions"
	StartupUri="View/MainWindow.xaml"
	ShutdownMode="OnExplicitShutdown">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Themes\Generic.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<DropShadowEffect
				x:Shared="False"
				x:Key="UIEffectShadow"
				ShadowDepth="1" BlurRadius="3"
				Opacity=".1" Direction="270"
				Color="#666" />

			<DropShadowEffect
				x:Shared="False"
				x:Key="emptyShadow"
				Opacity=".0" />

			<Duration x:Key="UIAnimationSpeed">0:0:0.2</Duration>
			<Duration x:Key="zeroTime">0:0:0.0</Duration>

			<ItemsPanelTemplate x:Key="HorizontalPanelTemplate">
				<StackPanel Orientation="Horizontal" />
			</ItemsPanelTemplate>

			<tb:TaskbarIcon
				x:Key="taskbarIcon"
				Visibility="Collapsed"
				IconSource="Icons/app_tasktray.ico" />

			<!--#region Converters -->
			<conv:BoolInverter x:Key="BoolInverter" />
			<!--#endregion-->

			<!--#region Geometries-->

			<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

			<!--#endregion-->

			<!--#region Template selectors-->
			<local:ColumnOptionTemplateSelector x:Key="ColumnOptionTemplateSelector" />
			<!--#endregion-->

			<DataTemplate x:Key="EmptyDataTemplate" />

			<!--#region ControlStyles-->


			<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
				<Setter Property="Padding" Value="20 4" />
				<Setter Property="Background" Value="#FFECECEC" />
				<Setter Property="Foreground" Value="#FF404040" />
				<Setter Property="BorderBrush" Value="#5000" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid>
								<Border
									x:Name="back"
									Background="{TemplateBinding Background}" />

								<Border
									x:Name="border"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />

								<Rectangle
									x:Name="effect"
									Fill="Transparent" />

								<ContentPresenter
									x:Name="content"
									ContentSource="Content"
									RecognizesAccessKey="True"
									Margin="{TemplateBinding Padding}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									TextBlock.Foreground="{TemplateBinding Foreground}"/>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="effect" Property="Fill" Value="#3FFF" />
								</Trigger>

								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="effect" Property="Fill" Value="#3000" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
									<Setter TargetName="effect" Property="Fill" Value="#0fff" />
									<Setter TargetName="back" Property="Background" Value="#feee" />
									<Setter TargetName="border" Property="BorderBrush" Value="#fbbb" />
								</Trigger>
							</ControlTemplate.Triggers>

						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="OverridesDefaultStyle" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<BulletDecorator
								VerticalAlignment="{TemplateBinding VerticalAlignment}"
								Background="Transparent">
								<BulletDecorator.Bullet>
									<Border
										x:Name="back"
										Width="14" Height="14"
										Background="{x:Static Brushes.White}">

										<Grid>
											<Border
												x:Name="border"
												ClipToBounds="True"
												IsHitTestVisible="False"
												BorderBrush="{DynamicResource CheckBoxBorderBrush}"
												Effect="{StaticResource UIEffectShadow}"
												BorderThickness="1" />

											<Path
												x:Name="CheckMark"
												Visibility="Collapsed"
												Width="10" Height="10"
												SnapsToDevicePixels="False"
												StrokeThickness="2"
												Data="M 1,5 L 4,8 L 9,1"
												Stroke="{DynamicResource AccentColorBrush}" />

											<Rectangle
												x:Name="IndeterminateMark"
												Visibility="Collapsed"
												Width="10" Height="10"
												SnapsToDevicePixels="False"
												Fill="{DynamicResource AccentColorBrush}" />
										</Grid>

									</Border>
								</BulletDecorator.Bullet>

								<ContentPresenter
									x:Name="content"
									Margin="4, 0, 0, 0"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									RecognizesAccessKey="True"
									TextBlock.Foreground="{TemplateBinding Foreground}"/>

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Pressed">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".5" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Disabled">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".0" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>

									<VisualStateGroup x:Name="FocusStates">
										<VisualState x:Name="Focused">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Unfocused">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</BulletDecorator>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="#888" />
								</Trigger>

								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource CheckBoxPressedBorderBrush}" />
								</Trigger>

								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
								</Trigger>

								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter TargetName="IndeterminateMark" Property="Visibility" Value="Visible" />
								</Trigger>

								<Trigger Property="IsFocused" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="border" Property="BorderBrush" Value="#BBB" />
									<Setter TargetName="back" Property="Background" Value="#F8F8F8" />
									<Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
									<Setter TargetName="IndeterminateMark" Property="Fill" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
									<Setter TargetName="content" Property="TextBlock.Foreground" Value="{DynamicResource DisabledForeground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="OverridesDefaultStyle" Value="False" />
				<Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RadioButton}">
							<BulletDecorator Background="{x:Static Brushes.Transparent}">
								<BulletDecorator.Bullet>
									<Grid>
										<Ellipse
											Width="14" Height="14"
											x:Name="back"
											Fill="{x:Static Brushes.White}" />

										<Ellipse
											x:Name="border"
											Width="14" Height="14"
											Stroke="{DynamicResource CheckBoxBorderBrush}"
											Effect="{StaticResource UIEffectShadow}">
											<Ellipse.Clip>
												<RectangleGeometry RadiusX="15" RadiusY="15" Rect="0 0 15 15" />
											</Ellipse.Clip>
										</Ellipse>

										<Ellipse
											x:Name="RadioMark"
											Visibility="Collapsed"
											Width="8" Height="8" StrokeThickness="0"
											Fill="{DynamicResource AccentColorBrush}" />
									</Grid>
								</BulletDecorator.Bullet>

								<ContentPresenter
									x:Name="content"
									Margin="5 0 0 0"
									VerticalAlignment="Center"
									HorizontalAlignment="Left"
									TextBlock.Foreground="{TemplateBinding Foreground}" />

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="MouseOver">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Pressed">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".3" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>

									<VisualStateGroup x:Name="FocusStates">
										<VisualState x:Name="Focused">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty=".Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Unfocused">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</BulletDecorator>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="Stroke" Value="{DynamicResource CheckBoxHoverBorderBrush}" />
								</Trigger>

								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="border" Property="Stroke" Value="{DynamicResource CheckBoxPressedBorderBrush}" />
								</Trigger>

								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
									<Setter TargetName="border" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
									<Setter TargetName="border" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsFocused" Value="true">
									<Setter TargetName="border" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
									<Setter TargetName="back" Property="Fill" Value="{DynamicResource TextBoxDisabledBackground}" />
									<Setter TargetName="RadioMark" Property="Fill" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
				<Setter Property="Padding" Value="2" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Background" Value="{x:Static Brushes.White}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Grid x:Name="back" Background="{TemplateBinding Background}">
								<Border
									x:Name="border"
									ClipToBounds="True"
									Effect="{StaticResource UIEffectShadow}"
									BorderBrush="{DynamicResource TextBoxBorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />

								<ScrollViewer
									x:Name="PART_ContentHost"
									Margin="{TemplateBinding BorderThickness}"
									Padding="{TemplateBinding Padding}" />

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup>
										<VisualState x:Name="Normal">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="MouseOver">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Focused">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
								</Trigger>

								<Trigger Property="IsFocused" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="BorderThickness" Value="0">
									<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
									<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
				<Setter Property="Padding" Value="2" />
				<Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Background" Value="#fff" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBox}">
							<Grid x:Name="back" Background="{TemplateBinding Background}">
								<Border
									x:Name="border"
									ClipToBounds="True"
									Effect="{StaticResource UIEffectShadow}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />

								<ToggleButton
									ClickMode="Press" Focusable="False"
									OverridesDefaultStyle="True"
									Background="{x:Static Brushes.Transparent}"
									IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">

									<ToggleButton.Template>
										<ControlTemplate TargetType="ToggleButton">
											<ContentPresenter ContentSource="Content" />
										</ControlTemplate>
									</ToggleButton.Template>

									<Grid
										Margin="{TemplateBinding BorderThickness}"
										Background="{x:Static Brushes.Transparent}">
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition Width="auto" />
										</Grid.ColumnDefinitions>

										<ContentPresenter
											x:Name="ContentSite"
											IsHitTestVisible="False"
											VerticalAlignment="Center"
											HorizontalAlignment="Left"
											Margin="{TemplateBinding Padding}"
											Content="{TemplateBinding SelectionBoxItem}"
											ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
											ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

										<TextBox
											x:Name="PART_EditableTextBox"
											Style="{StaticResource {x:Type TextBox}}"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Center"
											Margin="{TemplateBinding Padding}"
											Padding="0" Focusable="True"
											Background="{x:Static Brushes.Transparent}"
											Visibility="Hidden"
											BorderThickness="0"
											IsReadOnly="{TemplateBinding IsReadOnly}" />

										<Path
											x:Name="arrow"
											Grid.Column="1"
											VerticalAlignment="Center"
											HorizontalAlignment="Center"
											Margin="4 2"
											Data="{StaticResource DownArrowGeometry}"
											Fill="{TemplateBinding BorderBrush}" />
									</Grid>
								</ToggleButton>

								<Popup
									x:Name="PART_Popup"
									Focusable="False"
									PopupAnimation="Slide"
									AllowsTransparency="True"
									IsOpen="{TemplateBinding IsDropDownOpen}">

									<theme:SystemDropShadowChrome
										x:Name="shadow"
										Color="#71000000"
										Margin="0, 0, 5, 5"
										SnapsToDevicePixels="True">

										<Grid
											x:Name="DropDown"
											SnapsToDevicePixels="True"
											MinWidth="{TemplateBinding ActualWidth}"
											MinHeight="{TemplateBinding ActualHeight}"
											MaxHeight="{TemplateBinding MaxDropDownHeight}">
											<Border
												x:Name="DropDownBorder"
												BorderThickness="1, 0, 1, 1"
												BorderBrush="#aaa"
												Background="White">
												<ScrollViewer SnapsToDevicePixels="True">
													<StackPanel
														IsItemsHost="True"
														KeyboardNavigation.DirectionalNavigation="Contained" />
												</ScrollViewer>
											</Border>
										</Grid>
									</theme:SystemDropShadowChrome>
								</Popup>

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup>
										<VisualState x:Name="Normal">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="MouseOver">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Disabled">
											<Storyboard>
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Focused">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".3" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="FocusedDropDown">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".3" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
									<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource TextBoxHoverBorderBrush}" />
								</Trigger>

								<Trigger Property="IsFocused" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
									<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsKeyboardFocusWithin" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
									<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="IsDropDownOpen" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
									<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="BorderThickness" Value="0">
									<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
								</Trigger>

								<Trigger Property="IsEditable" Value="true">
									<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
									<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
									<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
									<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Grid
								x:Name="border"
								Margin="2"
								Background="#12888888">
								<Path 
									x:Name="arrow"
									Fill="#F444"
									VerticalAlignment="Bottom"
									Margin="2.5 4 2 4"
									Data="M-0.5,0 L6,0 L6,1 L-0.5,1  M-0.5,3 L5.5,3 L2.5,6 Z" />
								<ContentPresenter />
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter TargetName="border" Property="Background" Value="#30888888" />
								</Trigger>

								<Trigger Property="IsPressed" Value="True">
									<Setter TargetName="border" Property="Background" Value="#60888888" />
								</Trigger>

								<Trigger Property="IsChecked" Value="True">
									<Setter TargetName="border" Property="Background" Value="#FF888888" />
									<Setter TargetName="arrow" Property="Fill" Value="#FFFF" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="Cursor" Value="SizeAll" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Rectangle
								Margin="0 2">
								<Rectangle.Fill>
									<DrawingBrush
										TileMode="Tile"
										Viewport="0 0 4 4"
										Viewbox=" 0 0 8 8"
										ViewportUnits="Absolute"
										ViewboxUnits="Absolute">
										<DrawingBrush.Drawing>
											<DrawingGroup>
												<GeometryDrawing
													Brush="#AAA"
													Geometry="M4,4 L4,8 L8,8 L8,4 Z" />
											</DrawingGroup>
										</DrawingBrush.Drawing>
									</DrawingBrush>
								</Rectangle.Fill>
							</Rectangle>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="Background" Value="{x:Static Brushes.Transparent}" />
				<Setter Property="Foreground" Value="{x:Static Brushes.Transparent}" />
				<Setter Property="ToolBarTray.IsLocked" Value="True" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToolBar}">
							<Border
								x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
								<DockPanel>
									<ToggleButton
										x:Name="ToolBarOverflowToggle"
										DockPanel.Dock="Right"
										IsEnabled="{TemplateBinding HasOverflowItems}"
										ClickMode="Press"
										Style="{StaticResource ToolBarOverflowButtonStyle}"
										IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
										<Popup
											x:Name="OverflowPopup"
											AllowsTransparency="True"
											Placement="Bottom"
											StaysOpen="False"
											Focusable="False"
											PopupAnimation="None"
											IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
											<theme:SystemDropShadowChrome
												x:Name="shadow"
												Margin="0 0 5 5" Color="#71000000">
												<Border
													x:Name="DropDownBorder"
													BorderThickness="1"
													Background="#FFF"
													BorderBrush="#666">
													<ToolBarOverflowPanel
														x:Name="PART_ToolBarOverflowPanel"
														Margin="2"
														WrapWidth="200"
														Focusable="True"
														FocusVisualStyle="{x:Null}"
														KeyboardNavigation.TabNavigation="Cycle"
														KeyboardNavigation.DirectionalNavigation="Cycle" />
												</Border>
											</theme:SystemDropShadowChrome>
										</Popup>
									</ToggleButton>

									<Thumb
										x:Name="ToolBarThumb"
										Style="{StaticResource ToolBarThumbStyle}"
										Width="10" />

									<ToolBarPanel
										x:Name="PART_ToolBarPanel"
										IsItemsHost="True" />
								</DockPanel>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="HasOverflowItems" Value="false">
									<Setter TargetName="ToolBarOverflowToggle" Property="Visibility" Value="Collapsed" />
								</Trigger>
								
								<Trigger Property="IsOverflowOpen" Value="True">
									<Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
								</Trigger>
								<Trigger Property="ToolBarTray.IsLocked" Value="True">
									<Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="Background" Value="{x:Null}" />
				<Setter Property="BorderBrush" Value="{x:Null}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="#000" />
				<Setter Property="Padding" Value="8 4" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid>
								<Border 
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"/>

								<Border
									x:Name="border"
									Margin="{TemplateBinding BorderThickness}"
									Background="#0000"
									Padding="{TemplateBinding Padding}">
									<ContentPresenter
										x:Name="content"
										Content="{TemplateBinding Content}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										RecognizesAccessKey="True"/>
								</Border>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter TargetName="border" Property="Background" Value="#1000" />
								</Trigger>

								<Trigger Property="IsPressed" Value="True">
									<Setter TargetName="border" Property="Background" Value="#2000" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="border" Property="Background" Value="#08000000" />
									<Setter TargetName="content" Property="Opacity" Value="0.5" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="Background" Value="{x:Null}" />
				<Setter Property="BorderBrush" Value="{x:Null}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="#000" />
				<Setter Property="Padding" Value="8 4" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Grid>
								<Border 
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"/>

								<Border
									x:Name="border"
									Margin="{TemplateBinding BorderThickness}"
									Background="#0000"
									Padding="{TemplateBinding Padding}">
									<ContentPresenter
										x:Name="content"
										Content="{TemplateBinding Content}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										RecognizesAccessKey="True"/>
								</Border>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter TargetName="border" Property="Background" Value="#0D000000" />
								</Trigger>

								<Trigger Property="IsPressed" Value="True">
									<Setter TargetName="border" Property="Background" Value="#2000" />
								</Trigger>

								<Trigger Property="IsChecked" Value="True">
									<Setter TargetName="border" Property="Background" Value="#18000000" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsChecked" Value="True" />
										<Condition Property="IsMouseOver" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="border" Property="Background" Value="#3000" />
								</MultiTrigger>

								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="border" Property="Background" Value="#0000" />
									<Setter TargetName="content" Property="Opacity" Value="0.5" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}"
				   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

			<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}"
				   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

			<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
				<Setter Property="OverridesDefaultStyle" Value="True" />
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Background" Value="#CCC" />
				<Setter Property="Width" Value="1" />
				<Setter Property="Margin" Value="3 4" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Separator}">
							<Rectangle Fill="{TemplateBinding Background}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}" />

			<Style TargetType="{x:Type local:PlaceHolderTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
				<Setter Property="PlaceHolderForeground" Value="#888" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type local:PlaceHolderTextBox}">
							<Grid x:Name="back" Background="{TemplateBinding Background}">
								<Border
									x:Name="border"
									ClipToBounds="True"
									Effect="{StaticResource UIEffectShadow}"
									BorderBrush="{DynamicResource TextBoxBorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />

								<ScrollViewer
									x:Name="PART_ContentHost"
									Margin="{TemplateBinding BorderThickness}"
									Padding="{TemplateBinding Padding}" />

								<Label
									x:Name="PART_PlaceHolder"
									IsHitTestVisible="False"
									Margin="{TemplateBinding BorderThickness}"
									Padding="{TemplateBinding Padding}"
									Content="{TemplateBinding PlaceHolder}"
									Visibility="Collapsed" />

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup>
										<VisualState x:Name="Normal">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="MouseOver">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".2" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>

										<VisualState x:Name="Focused">
											<Storyboard Storyboard.TargetName="border">
												<DoubleAnimation
													Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
													To=".1" Duration="{StaticResource zeroTime}" />
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsPlaceHolderShown" Value="true">
									<Setter TargetName="PART_PlaceHolder" Property="Visibility" Value="Visible" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
								</Trigger>

								<Trigger Property="IsFocused" Value="true">
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
								</Trigger>

								<Trigger Property="BorderThickness" Value="0">
									<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
								</Trigger>

								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
									<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
									<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->

			<Style x:Key="NoHeaderTabControlStyle" TargetType="{x:Type TabControl}">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="SelectedIndex" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Border
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
								<ContentPresenter
									x:Name="PART_SelectedContentHost"
									ContentSource="SelectedContent" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<sys:Boolean x:Key="ShowImageInTimeline">True</sys:Boolean>
			<sys:Boolean x:Key="ShowImageInDetail">True</sys:Boolean>
			<sys:Boolean x:Key="RelativeTime">True</sys:Boolean>
			<sys:Boolean x:Key="ShowActionButtonInTimeline">True</sys:Boolean>
			<TextFormattingMode x:Key="TextFormattingMode">Display</TextFormattingMode>

			<Thickness x:Key="BottomThickness" Bottom="1" />

			<ItemContainerTemplate x:Key="ItemsContainerStyle">
				<VirtualizingStackPanel />
			</ItemContainerTemplate>

			<Style x:Key="ToolBarBorderStyle" TargetType="{x:Type Border}">
				<Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
				<Setter Property="BorderThickness" Value="{StaticResource BottomThickness}" />
				<Setter Property="TextBlock.Foreground" Value="{DynamicResource ToolBarForeground}" />
			</Style>

			<Style x:Key="BoxItemBase" TargetType="{x:Type ListBoxItem}">
				<Setter Property="Padding" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="#000" />
				<Setter Property="BorderBrush" Value="#f0f0f0" />
				<Setter Property="BorderThickness" Value="0 0 0 1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border
								x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
								<ContentPresenter
									Margin="{TemplateBinding Padding}" />
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="border" Property="Background" Value="#f4f4f4" />
									<Setter TargetName="border" Property="BorderBrush" Value="#ccc" />
								</Trigger>

								<Trigger Property="IsSelected" Value="true">
									<Setter TargetName="border" Property="Background" Value="#efefef" />
									<Setter TargetName="border" Property="BorderBrush" Value="#aaa" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource BoxItemBase}" />

			<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource BoxItemBase}" />


			<Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource BoxItemBase}">
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Padding" Value="4 2" />
			</Style>

			<!--#region Data templates -->

			<DataTemplate DataType="{x:Type vm:AuthenticationViewModel}">
				<Border
					BorderThickness="2"
					BorderBrush="#ccc">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="auto" />
						</Grid.RowDefinitions>

						<Border
							Grid.Row="1"
							Padding="5"
							Background="#eee">
							<StackPanel 
								Orientation="Horizontal"
								HorizontalAlignment="Right">
								<Button
									Margin="4" Padding="18 2"
									Content="次へ(_N)"
									Command="{Binding NextCommand, Mode=OneTime}"/>
								<Button
									Margin="4" Padding="18 2"
									Content="閉じる(_C)"
									Command="{Binding CancelCommand, Mode=OneTime}"/>
							</StackPanel>
						</Border>

						<TabControl
							Margin="16 16 16 8"
							SelectedIndex="{Binding PageIndex, Mode=TwoWay}"
							Background="{x:Static Brushes.Transparent}"
							BorderThickness="0" Padding="0">
							<TabControl.ItemContainerStyle>
								<Style TargetType="{x:Type TabItem}">
									<Setter Property="Visibility" Value="Collapsed" />
								</Style>
							</TabControl.ItemContainerStyle>

							<TabItem>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="auto" />
										<RowDefinition Height="*" />
										<RowDefinition Height="auto" />
										<RowDefinition Height="auto" />
										<RowDefinition Height="auto" />
									</Grid.RowDefinitions>

									<TextBlock
										Grid.Row="1" TextWrapping="Wrap"
										Foreground="Red" FontWeight="Bold"
										Text="{Binding Error, Mode=OneWay}" />

									<Label
										Grid.ColumnSpan="2"
										Padding="0" FontSize="20"
										Content="アカウントの追加" />

									<CheckBox 
										Margin="0 0 0 6"
										Grid.Row="2" Grid.ColumnSpan="2"
										IsChecked="{Binding OverrideKey}"
										Content="Liberfy以外のAPIキーを使用する"/>

									<TextBlock
										Grid.Row="3"
										Text="ConsumerKey   " 
										VerticalAlignment="Center"
										local:ElementBehavior.Show="{Binding OverrideKey, Mode=OneWay}" />
									<TextBlock
										Grid.Row="4"
										Text="ConsumerSecret   "
										VerticalAlignment="Center"
										local:ElementBehavior.Show="{Binding OverrideKey, Mode=OneWay}" />

									<TextBox
										Margin="0 4" Grid.Row="3" Grid.Column="1"
										local:ElementBehavior.Show="{Binding OverrideKey, Mode=OneWay}"
										Text="{Binding ConsumerKey, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
									<TextBox
										Margin="0 4" Grid.Row="4" Grid.Column="1"
										local:ElementBehavior.Show="{Binding OverrideKey, Mode=OneWay}"
										Text="{Binding ConsumerSecret, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
								</Grid>
							</TabItem>

							<TabItem>
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="auto" />
										<RowDefinition Height="auto" />
										<RowDefinition Height="*" />
										<RowDefinition Height="auto" />
										<RowDefinition Height="auto" />
									</Grid.RowDefinitions>

									<TextBlock
										Grid.Row="1" TextWrapping="Wrap"
										Foreground="Red" FontWeight="Bold"
										Text="{Binding Error, Mode=OneWay}" />

									<Label
										Padding="0" FontSize="20"
										Content="PINコードの入力" />

									<TextBlock
										Grid.Row="1" TextWrapping="Wrap"
										Text="Liberfyを認証し、表示されるPINコードを入力してください。" />

									<TextBlock Grid.Row="3" VerticalAlignment="Center">
										<Hyperlink Command="{Binding CopyClipboardCommand, Mode=OneTime}">
											<Run Text="URLをクリップボードにコピーする" />
										</Hyperlink>
									</TextBlock>

									<TextBox
										Margin="0 4" Grid.Row="4" FontSize="24" FontWeight="Bold"
										FontFamily="Comic Sans MS" Foreground="#444" TextAlignment="Center"
										Text="{Binding PinCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
										IsEnabled="{Binding IsRunning, Mode=OneWay, Converter={StaticResource BoolInverter}}" />
								</Grid>
							</TabItem>

							<TabItem>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="auto" />
										<RowDefinition Height="*" />
										<RowDefinition Height="auto" />
									</Grid.RowDefinitions>

									<TextBlock
										Grid.Row="1" TextWrapping="Wrap"
										Foreground="Red" FontWeight="Bold"
										Text="{Binding Error, Mode=OneWay}" />

									<Label
										Grid.ColumnSpan="2"
										Padding="0" FontSize="20"
										Content="認証エラー" />

								</Grid>
							</TabItem>
						</TabControl>
					</Grid>
				</Border>
			</DataTemplate>

			<DataTemplate x:Key="AccountItemTemplate" DataType="{x:Type local:Account}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="auto" />
						<ColumnDefinition />
					</Grid.ColumnDefinitions>

					<Image
						Margin="0 0 8 0" Width="36" Height="36"
						Source="{Binding Info.ProfileImageUrl, IsAsync=True}" />

					<StackPanel Grid.Column="1" VerticalAlignment="Center">
						<TextBlock Text="{Binding Info.Name, Mode=OneWay}" FontWeight="Bold" />
						<TextBlock Text="{Binding Info.ScreenName, Mode=OneWay, StringFormat='{}@{0}'}" />
					</StackPanel>
				</Grid>
			</DataTemplate>

			<Style x:Key="AccountListItemTemplate" TargetType="{x:Type ListViewItem}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Border
								x:Name="border"
								Padding="8"
								Background="Transparent">
								<ContentPresenter />
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter TargetName="border" Property="Background" Value="#1222" />
								</Trigger>

								<Trigger Property="IsSelected" Value="True">
									<Setter TargetName="border" Property="Background" Value="#2444" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--#endregion-->

			<!--#region Column option templates-->

			<DataTemplate x:Key="SearchColumnOptionTemplate" DataType="{x:Type local:SearchColumn}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="4*" />
						<ColumnDefinition Width="6*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition Height="auto" />
					</Grid.RowDefinitions>

					<TextBlock
						Text="検索種別"
						VerticalAlignment="Center" />

					<ComboBox
						Margin="0 2"
						Grid.Column="1" Grid.ColumnSpan="2"
						DisplayMemberPath="Value"
						SelectedValuePath="Key"
						SelectedValue="{Binding SearchType}"
						ItemsSource="{x:Static local:SearchColumn.SearchTypes}" />

					<Grid Grid.Row="1" Grid.ColumnSpan="2">
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4*" />
							<ColumnDefinition Width="7*" />
						</Grid.ColumnDefinitions>

						<CheckBox
							Content="言語"
							Grid.Row="0"
							VerticalAlignment="Center"
							IsChecked="{Binding UseLanguage}" />

						<ComboBox
							Grid.Row="0"
							Grid.Column="1"
							Margin="0 2"
							SelectedValuePath="Key"
							DisplayMemberPath="Value"
							SelectedValue="{Binding Language}"
							ItemsSource="{x:Static local:SearchColumn.Languages}" />

						<CheckBox
							Grid.Row="1"
							Content="検索結果"
							VerticalAlignment="Center"
							IsChecked="{Binding UseResultType}" />

						<ComboBox
							Grid.Row="1"
							Grid.Column="1"
							Margin="0 2"
							SelectedValuePath="Key"
							DisplayMemberPath="Value"
							SelectedValue="{Binding ResultType}"
							ItemsSource="{x:Static local:SearchColumn.ResultTypes}" />

						<CheckBox
							Grid.Row="2"
							Content="until"
							VerticalAlignment="Center"
							IsChecked="{Binding UseUntil}" />

						<TextBox
							Grid.Row="2"
							Grid.Column="1"
							Margin="0 2"
							Text="{Binding Until, UpdateSourceTrigger=PropertyChanged}" />

						<CheckBox
							Grid.Row="3"
							Content="since__id"
							VerticalAlignment="Center"
							IsChecked="{Binding UseSinceId}"/>

						<TextBox
							Grid.Row="3"
							Grid.Column="1"
							Margin="0 2"
							Text="{Binding SinceId, UpdateSourceTrigger=PropertyChanged}" />

						<CheckBox
							Grid.Row="4"
							Content="max__id"
							VerticalAlignment="Center"
							IsChecked="{Binding UseMaxId}" />

						<TextBox
							Grid.Row="4"
							Grid.Column="1"
							Margin="0 2"
							Text="{Binding MaxId, UpdateSourceTrigger=PropertyChanged}" />
					</Grid>
				</Grid>
			</DataTemplate>

			<DataTemplate x:Key="ListColumnOptionTemplate" DataType="{x:Type local:ListColumn}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="auto" />
					</Grid.ColumnDefinitions>

				</Grid>
			</DataTemplate>

			<DataTemplate x:Key="StreamSearchColumnOptionTemplate" DataType="{x:Type local:StreamSearchColumn}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="4*" />
						<ColumnDefinition Width="6*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition Height="auto" />
					</Grid.RowDefinitions>

					<Grid Grid.Row="1" Grid.ColumnSpan="2">
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4*" />
							<ColumnDefinition Width="7*" />
						</Grid.ColumnDefinitions>

						<CheckBox
							Grid.ColumnSpan="2"
							Content="検索時に一覧をクリアする"
							VerticalAlignment="Center"
							IsChecked="{Binding ClearItemsAfterSearch}" />

						<CheckBox
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Content="検索を行う"
							VerticalAlignment="Center"
							IsChecked="{Binding EnableBeforeSearch}" />

						<CheckBox
							Grid.Row="2"
							Content="言語"
							VerticalAlignment="Center"
							IsChecked="{Binding UseLanguage}" />

						<ComboBox
							Grid.Row="2"
							Grid.Column="1"
							Margin="0 2"
							SelectedValuePath="Key"
							DisplayMemberPath="Value"
							SelectedValue="{Binding Language}"
							ItemsSource="{x:Static local:SearchColumn.Languages}" />

					</Grid>
				</Grid>
			</DataTemplate>
			
			<!--#endregion-->

			<Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
				<Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
				<Setter Property="BorderThickness" Value="{DynamicResource BottomThickness}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ToolBarForeground}" />
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
