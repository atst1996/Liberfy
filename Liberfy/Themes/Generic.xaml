<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Liberfy"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <SolidColorBrush x:Key="ToolBarForeground" Color="#444" />
    <SolidColorBrush x:Key="ToolBarBorderBrush" Color="#DADADA" />
    <SolidColorBrush x:Key="ToolBarBackground" Color="#F8F8F8" />

    <SolidColorBrush x:Key="SettingTabPanelBackground" Color="#EEE" />
    <SolidColorBrush x:Key="SettingTabItemForeground" Color="#444" />
    <SolidColorBrush x:Key="SettingTabItemNormalBorderBrush" Color="#CCC" />
    <SolidColorBrush x:Key="SettingTabItemSelectedBorderBrush" Color="#DDD" />

    <SolidColorBrush x:Key="TabControlBackground" Color="#fff" />
    <SolidColorBrush x:Key="TabControlBorderBrush" Color="#ccc" />
    <SolidColorBrush x:Key="TabItemBackground" Color="#f4f4f4" />
    <SolidColorBrush x:Key="TabItemForeground" Color="#000" />
    <SolidColorBrush x:Key="TabItemHoverBackground" Color="#fafafa" />
    <SolidColorBrush x:Key="TabItemSelectedBackground" Color="#fff" />
    <SolidColorBrush x:Key="TabItemBorderBrush" Color="#ccc" />
    <SolidColorBrush x:Key="TabItemSelectedForeground" Color="#666" />

    <Color x:Key="AccentColor">#07c</Color>
    <SolidColorBrush x:Key="AccentColorBrush" Color="#07c" />

    <SolidColorBrush x:Key="DisabledForeground" Color="#666" />

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#07c" />
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="#fff" />


    <SolidColorBrush x:Key="TextBoxBorderBrush" Color="#aaa" />
    <SolidColorBrush x:Key="TextBoxHoverBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="TextBoxDisabledBorderBrush" Color="#D4D4D4" />
    <SolidColorBrush x:Key="TextBoxDisabledBackground" Color="#FCFCFC" />
    <SolidColorBrush x:Key="TextBoxDisabledForeground" Color="#666" />

    <SolidColorBrush x:Key="CheckBoxBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="CheckBoxHoverBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="CheckBoxBulletBrush" Color="#AAA" />
    <SolidColorBrush x:Key="CheckBoxPressedBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="CheckBoxBulletDisabledBrush" Color="#AAA" />

    <SolidColorBrush x:Key="PopupBorderBrush" Color="#aaa" />
    <SolidColorBrush x:Key="PopupBackgroundBrush" Color="#f8f8f8" />

    <SolidColorBrush x:Key="ColumnBackground" Color="#AFFF" />
    <SolidColorBrush x:Key="ColumnBorderBrush" Color="#FFE5EBF0" />
    <SolidColorBrush x:Key="ColumnHeaderForeground" Color="#222" />
    <SolidColorBrush x:Key="ColumnHeaderBackground" Color="#1555" />
    <SolidColorBrush x:Key="ColumnHeaderBorderBrush" Color="#2333" />

    <SolidColorBrush x:Key="InputBox.Static.Border" Color="#FFABABAB"/>
    <SolidColorBrush x:Key="InputBox.MouseOver.Border" Color="#FF898989"/>
    <SolidColorBrush x:Key="InputBox.Focus.Border" Color="#07C"/>
    <SolidColorBrush x:Key="InputBox.Disabled.Border" Color="#FFD9D9D9" />

    <SolidColorBrush x:Key="InputBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="InputBox.MouseOver.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="InputBox.Focus.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="InputBox.Disabled.Background" Color="#FFF0F0F0" />

    <DropShadowEffect x:Key="InputBox.Static.Shadow" Opacity="0" BlurRadius="0" />
    <DropShadowEffect x:Key="InputBox.MouseOver.Shadow" ShadowDepth="0" BlurRadius="4" Opacity=".5" Color="#AAA" />
    <DropShadowEffect x:Key="InputBox.Focus.Shadow" ShadowDepth="0" BlurRadius="4" Opacity=".5" Color="#07c" />
    <DropShadowEffect x:Key="InputBox.Disabled.Shadow" Opacity="0" BlurRadius="0" />

    <SolidColorBrush x:Key="InputBox.Static.InnerButton.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="InputBox.MouseOver.InnerButton.Background" Color="#FFEBF4FC" />
    <SolidColorBrush x:Key="InputBox.Pressed.InnerButton.Background" Color="#FFDAEBFC" />
    <SolidColorBrush x:Key="InputBox.Disabled.InnerButton.Background" Color="Transparent"/>

    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="True"
                        StrokeDashArray="1 2" StrokeThickness="1"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="3 4" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InputBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        CornerRadius="1"
                        ClipToBounds="{TemplateBinding ClipToBounds}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True"
                        Effect="{StaticResource InputBox.Static.Shadow}">
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Focusable="False"
                            Padding="{TemplateBinding Padding}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                            VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.56"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource InputBox.Disabled.Background}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource InputBox.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource InputBox.MouseOver.Border}"/>
                            <Setter TargetName="border" Property="Effect" Value="{StaticResource InputBox.MouseOver.Shadow}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource InputBox.Focus.Border}"/>
                            <Setter TargetName="border" Property="Effect" Value="{StaticResource InputBox.Focus.Shadow}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        SnapsToDevicePixels="True"
                        CornerRadius="1"
                        Background="{StaticResource InputBox.Static.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{StaticResource InputBox.Static.Border}"
                        Effect="{StaticResource InputBox.Static.Shadow}">
                        <Border
                            x:Name="splitBorder"
                            Margin="0"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            SnapsToDevicePixels="True"
                            HorizontalAlignment="Right"
                            BorderThickness="0"
                            BorderBrush="Transparent">
                            <Path
                                x:Name="arrow"
                                Margin="0"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Fill="{StaticResource ComboBox.Static.Glyph}"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource InputBox.Static.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource InputBox.Static.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource InputBox.Static.InnerButton.Background}"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource InputBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource InputBox.MouseOver.Border}"/>
                            <Setter Property="Effect" TargetName="templateRoot" Value="{StaticResource InputBox.MouseOver.Shadow}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource InputBox.MouseOver.InnerButton.Background}"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"  Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource InputBox.Focus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource InputBox.Focus.Border}"/>
                            <Setter Property="Effect" TargetName="templateRoot" Value="{StaticResource InputBox.Focus.Shadow}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource InputBox.Pressed.InnerButton.Background}" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource InputBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource InputBox.Disabled.Border}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource InputBox.Disabled.InnerButton.Background}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>

            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="1"
                VerticalOffset="-1"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Placement="Bottom">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border
                        x:Name="dropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>

            <ToggleButton
                x:Name="toggleButton"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Grid.ColumnSpan="2"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}"/>

            <ContentPresenter
                x:Name="contentPresenter"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                IsHitTestVisible="False"
                Margin="{TemplateBinding Padding}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Focusable="False"
                        Background="Transparent"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Placement="Bottom">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border
                        x:Name="dropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>

            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />

            <Border
                x:Name="border"
                CornerRadius="1"
                Background="{StaticResource TextBox.Static.Background}"
                Margin="{TemplateBinding BorderThickness}">
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Margin="{TemplateBinding Padding}"
                    Style="{StaticResource ComboBoxEditableTextBox}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>

            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="border" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="border" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource InputBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InputBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6 5 5 5"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Padding" Value="3 4"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="HeaderedContent.HeaderLabel.Static.Foreground">#444444</SolidColorBrush>
    <SolidColorBrush x:Key="HeaderedContent.HeaderLabel.Focus.Foreground">#0077CC</SolidColorBrush>

    <Style TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label x:Name="label" FontWeight="Bold" Foreground="{StaticResource HeaderedContent.HeaderLabel.Static.Foreground}" Content="{Binding}" Padding="0" Margin="0 0 0 6" />
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type HeaderedContentControl}}}" Value="True">
                            <Setter TargetName="label" Property="Foreground" Value="{StaticResource HeaderedContent.HeaderLabel.Focus.Foreground}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <StackPanel>
                        <ContentPresenter
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" />
                        <ContentPresenter
                            ContentSource="Content"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Begin: Butotn styles -->

    <SolidColorBrush x:Key="Button.Light.Static.Foreground" Color="#FF333333" />
    <SolidColorBrush x:Key="Button.Darken.Static.Foreground" Color="#FFFFFFFF" />

    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFEEEEEE"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFE8E8E8"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FFA4A4A4"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFBBBBBB"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF777777"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF6F6F6"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFB2B2B2"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF969696"/>

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Padding" Value="6 4"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Light.Static.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Button.Danger.Static.Background" Color="#FFFF4040"/>
    <SolidColorBrush x:Key="Button.Danger.Static.Border" Color="#FBB8071C"/>
    <SolidColorBrush x:Key="Button.Danger.MouseOver.Background" Color="#FFF93A3A"/>
    <SolidColorBrush x:Key="Button.Danger.MouseOver.Border" Color="#FBB20116"/>
    <SolidColorBrush x:Key="Button.Danger.Pressed.Background" Color="#FFCC0D0D"/>
    <SolidColorBrush x:Key="Button.Danger.Pressed.Border" Color="#FF770000"/>
    <SolidColorBrush x:Key="Button.Danger.Disabled.Background" Color="#FFFFAAAA"/>
    <SolidColorBrush x:Key="Button.Danger.Disabled.Border" Color="#FFFF8888"/>
    <SolidColorBrush x:Key="Button.Danger.Disabled.Foreground" Color="#FFFF6666"/>

    <Style x:Key="DangerButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Button.Danger.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Danger.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Darken.Static.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Danger.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Danger.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Danger.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Danger.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Danger.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Danger.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Danger.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Button.Primary.Static.Background" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Button.Primary.Static.Border" Color="#FF003388"/>
    <SolidColorBrush x:Key="Button.Primary.MouseOver.Background" Color="#FF0071C6"/>
    <SolidColorBrush x:Key="Button.Primary.MouseOver.Border" Color="#FF002D82"/>
    <SolidColorBrush x:Key="Button.Primary.Pressed.Background" Color="#FF004499"/>
    <SolidColorBrush x:Key="Button.Primary.Pressed.Border" Color="#FF000055"/>
    <SolidColorBrush x:Key="Button.Primary.Disabled.Background" Color="#FFCCEEFF"/>
    <SolidColorBrush x:Key="Button.Primary.Disabled.Border" Color="#FF99BBCC"/>
    <SolidColorBrush x:Key="Button.Primary.Disabled.Foreground" Color="#FF7799BB"/>

    <Style x:Key="PrimaryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Button.Primary.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Primary.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Darken.Static.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Primary.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Primary.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Primary.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Primary.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Primary.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Primary.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Primary.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- End: Button styles -->

    <!-- Begin: CheckBox style -->

    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF666666"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF0077CC"/>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            Margin="1"
                            CornerRadius="1"
                            Width="14" Height="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Margin="1" Opacity="0" Stretch="None"
                                    Fill="{StaticResource OptionMark.Static.Glyph}"
                                    Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " />

                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="2" Opacity="0"
                                    Fill="{StaticResource OptionMark.Static.Glyph}" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Effect" TargetName="checkBoxBorder" Value="{StaticResource InputBox.Focus.Shadow}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource InputBox.Focus.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- End: CheckBox style -->

    <!-- Begin: RadioButton style -->

    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF666666"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF0077CC"/>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="radioButtonBorder"
                            Margin="1 0"
                            CornerRadius="8"
                            Width="14" Height="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse
                                    x:Name="optionMark"
                                    Opacity="0"
                                    VerticalAlignment="Stretch"
                                    HorizontalAlignment="Stretch"
                                    Fill="{StaticResource RadioButton.Static.Glyph}" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Effect" TargetName="radioButtonBorder" Value="{StaticResource InputBox.Focus.Shadow}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource InputBox.Focus.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- End: RadioButton syle -->

    <!-- Begin: Slide style -->

    <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>

    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SliderThumbDefault" TargetType="{x:Type Thumb}">
        <Grid
            UseLayoutRounding="True"
            VerticalAlignment="Center"
            HorizontalAlignment="Center">
            <Ellipse
                x:Name="grip"
                Width="14" Height="14"
                Fill="{StaticResource SliderThumb.Static.Background}"
                Stroke="{StaticResource SliderThumb.Static.Border}"
                StrokeThickness="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                <Setter Property="Effect" TargetName="grip" Value="{StaticResource InputBox.Focus.Shadow}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border
            x:Name="border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar
                    x:Name="TopTick"
                    Grid.Row="0"
                    Margin="0 0 0 2"
                    Height="4"
                    Placement="Top"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar
                    x:Name="BottomTick"
                    Grid.Row="2"
                    Margin="0 2 0 0"
                    Height="4"
                    Placement="Bottom"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <Border
                    x:Name="TrackBackground"
                    Grid.Row="1"
                    Margin="5 0"
                    Height="3" 
                    VerticalAlignment="center"
                    Background="{StaticResource SliderThumb.Track.Background}">
                    <Canvas Margin="-6 -1">
                        <Rectangle
                            x:Name="PART_SelectionRange"
                            Height="3"
                            Visibility="Hidden"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.DecreaseLarge}"
                            Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.IncreaseLarge}"
                            Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="False"
                            Width="14" Height="14"
                            OverridesDefaultStyle="True"
                            VerticalAlignment="Center"
                            Template="{StaticResource SliderThumbDefault}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5 2 5 0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5 0 5 2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border
            x:Name="border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar
                    x:Name="TopTick"
                    Grid.Column="0"
                    Margin="0 0 2 0"
                    Width="4"
                    Placement="Left"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar
                    x:Name="BottomTick"
                    Grid.Column="2"
                    Margin="2 0 0 0"
                    Width="4"
                    Placement="Right"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <Border
                    x:Name="TrackBackground"
                    Grid.Column="1"
                    Margin="0 5"
                    Width="3"
                    HorizontalAlignment="center"
                    Background="{StaticResource SliderThumb.Track.Background}">
                    <Canvas Margin="-1 -6">
                        <Rectangle
                            x:Name="PART_SelectionRange"
                            Width="4.0"
                            Visibility="Hidden"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="False"
                            Width="14" Height="14"
                            OverridesDefaultStyle="True"
                            VerticalAlignment="Top"
                            Template="{StaticResource SliderThumbDefault}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}"/>
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- End: Slider style -->

    <!--#region ToolBar style -->

    <SolidColorBrush x:Key="ToolBar.Static.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ToolBar.Static.BorderBrush" Color="#FFD7D7D7" />
    <SolidColorBrush x:Key="ToolBar.ToggleButton.Static.Background" Color="#FFD7D7D7"/>
    <SolidColorBrush x:Key="ToolBar.ToggleButton.Hover.Background" Color="#FFC0C0C0"/>
    <SolidColorBrush x:Key="ToolBar.Gripper" Color="#FFAAAAAA"/>

    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{StaticResource ToolBar.Static.Background}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBar.ToggleButton.Static.Background}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <Canvas
                            HorizontalAlignment="Right"
                            Height="6"
                            Margin="2 7 2 2"
                            SnapsToDevicePixels="True"
                            VerticalAlignment="Bottom"
                            Width="7">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.ToggleButton.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.ToggleButton.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ToolBar.Gripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBar.ToggleButton.Static.Background}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <Canvas
                            HorizontalAlignment="Right"
                            Height="7"
                            Margin="7 2 2 2"
                            SnapsToDevicePixels="True"
                            VerticalAlignment="Bottom"
                            Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.ToggleButton.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.ToggleButton.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ToolBar.Gripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="ToolBar.Menu.Static.Border" Color="#FFB6BDC5"/>
    <SolidColorBrush x:Key="ToolBar.SubMenu.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0 0 4 4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                            <GeometryDrawing Brush="{StaticResource ToolBar.Gripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ToolBar.Template.Horizontal" TargetType="{x:Type ToolBar}">
        <Grid x:Name="Grid" SnapsToDevicePixels="True">
            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                <ToggleButton
                    x:Name="OverflowButton"
                    ClickMode="Press"
                    FocusVisualStyle="{x:Null}"
                    IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}"
                    Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" />
                <Popup
                    x:Name="OverflowPopup"
                    AllowsTransparency="True"
                    Focusable="False"
                    IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    Placement="Bottom"
                    StaysOpen="False">
                    <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <Border
                            x:Name="ToolBarSubMenuBorder"
                            BorderBrush="{StaticResource ToolBar.Menu.Static.Border}"
                            BorderThickness="1"
                            Background="{StaticResource ToolBar.SubMenu.Static.Background}"
                            RenderOptions.ClearTypeHint="Enabled">
                            <ToolBarOverflowPanel
                                x:Name="PART_ToolBarOverflowPanel"
                                KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="True" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                KeyboardNavigation.TabNavigation="Cycle"
                                WrapWidth="200" />
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <Border
                x:Name="MainPanelBorder"
                Margin="0 0 11 0"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel
                    KeyboardNavigation.TabIndex="1"
                    KeyboardNavigation.TabNavigation="Local">
                    <Thumb
                        x:Name="ToolBarThumb"
                        Margin="-3 -1 0 0"
                        Padding="6 5 1 6"
                        Style="{StaticResource ToolBarThumbStyle}"
                        Width="10" />
                    <ContentPresenter
                        x:Name="ToolBarHeader"
                        Margin="4 0"
                        ContentSource="Header"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <ToolBarPanel
                        x:Name="PART_ToolBarPanel"
                        Margin="2"
                        IsItemsHost="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="True">
                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="True">
                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                <Setter Property="Margin" TargetName="Shdw" Value="0 0 5 5"/>
                <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="True"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1 -3 0 0"/>
                <Setter Property="Padding" TargetName="ToolBarThumb" Value="5 6 6 1"/>
                <Setter Property="Margin" TargetName="ToolBarHeader" Value="0 0 0 4"/>
                <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="2"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                <Setter Property="Margin" TargetName="MainPanelBorder" Value="0 0 0 11"/>
                <Setter Property="Background" Value="{StaticResource ToolBar.Static.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{StaticResource ToolBar.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Static.BorderBrush}" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="Template" Value="{StaticResource ToolBar.Template.Horizontal}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="BorderThickness" Value="0 0 1 0" />
            </Trigger>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource ToolBar.Static.BorderBrush}"/>
        <Setter Property="MinWidth" Value="1"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="Margin" Value="2 2 2 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ToolBar.Button.Hover.Border" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="ToolBar.Button.Hover.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="ToolBar.Button.Pressed.Border" Color="#FF909090"/>
    <SolidColorBrush x:Key="ToolBar.Button.Pressed.Background" Color="#FFC0C0C0"/>
    <SolidColorBrush x:Key="ToolBar.Button.Checked.Background" Color="#FFC0C0C0"/>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="8 2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="Bd"
                        SnapsToDevicePixels="True"
                        Padding="{TemplateBinding Padding}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBar.Button.Hover.Border}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.Button.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBar.Button.Hover.Border}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.Button.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBar.Button.Pressed.Border}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBar.Button.Pressed.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="8 2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Hover.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Checked.Background}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Hover.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Hover.Background}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Hover.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Hover.Background}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Pressed.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Pressed.Background}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Pressed.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Pressed.Background}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ToolBar.Button.Pressed.Border}"/>
                            <Setter Property="Background" Value="{StaticResource ToolBar.Button.Pressed.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Padding" Value="4 2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Padding" Value="4 2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!--#endregion ToolBar styles -->

</ResourceDictionary>