<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:is="http://schemas.microsoft.com/expression/2010/interactions"
	xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
	xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:local="clr-namespace:Liberfy.XAML"
	xmlns:app="clr-namespace:Liberfy"
	xmlns:conv="clr-namespace:Liberfy.Converter">

	<FontFamily x:Key="FontAwesome">/Resources/#FontAwesome</FontFamily>

	<conv:BoolInverter x:Key="BoolInverter" />

	<!--#region Geometries-->

	<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

	<!--#endregion-->

	<DropShadowEffect x:Key="UIEffectShadow" x:Shared="False" ShadowDepth="1" BlurRadius="3" Opacity=".1" Direction="270" Color="#666" />

	<DropShadowEffect x:Key="emptyShadow" x:Shared="False" Opacity=".0" />

	<Style x:Key="ImageButton" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="Transparent">
						<ContentPresenter
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ActionButton" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="FontSize" Value="16" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
		<Setter Property="RenderOptions.CachingHint" Value="Cache" />
		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<ContentPresenter
							x:Name="content" Opacity="0.6" Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="content" Property="TextBlock.Foreground" Value="#888" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="false">
							<Setter TargetName="content" Property="TextBlock.Foreground" Value="#222" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="content" Property="Opacity" Value="1.0" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="content" Property="Opacity" Value="0.8" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ActionToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="FontSize" Value="16" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
		<Setter Property="RenderOptions.CachingHint" Value="Cache" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<ContentPresenter
							x:Name="content" Opacity="0.6" Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="content" Property="TextBlock.Foreground" Value="#222" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="content" Property="TextBlock.Foreground" Value="#888" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="content" Property="Opacity" Value="1.0" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="content" Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarIconText" TargetType="{x:Type TextBlock}">
		<Setter Property="FontSize" Value="16" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
		<Setter Property="UseLayoutRounding" Value="False" />
		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
	</Style>

	<Style x:Key="UserNameLinkText" TargetType="{x:Type Hyperlink}">
		<Setter Property="Foreground" Value="#000" />
		<Setter Property="TextDecorations" Value="None" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
				<Setter Property="TextDecorations" Value="Underline" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="MetadataLinkText" TargetType="{x:Type Hyperlink}">
		<Setter Property="Foreground" Value="#888" />
		<Setter Property="TextDecorations" Value="None" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
				<Setter Property="TextDecorations" Value="Underline" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="HyperlinkText" TargetType="{x:Type Hyperlink}">
		<Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="Red" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="UserNameTextStyle" TargetType="{x:Type TextBlock}">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="TextTrimming" Value="CharacterEllipsis" />
	</Style>

	<Style x:Key="QuotedTweetButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Foreground" Value="#000" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="#aaa" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border
							x:Name="border" CornerRadius="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="#eee" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Thickness x:Key="TimelineItemEntityMargin">4 0 4 4</Thickness>

	<Duration x:Key="UIAnimationSpeed">0:0:0.2</Duration>
	<Duration x:Key="zeroTime">0:0:0.0</Duration>

	<ItemsPanelTemplate x:Key="HorizontalPanelTemplate">
		<StackPanel Orientation="Horizontal" />
	</ItemsPanelTemplate>

	<DataTemplate x:Key="EmptyDataTemplate" />

	<Style x:Key="SimpleButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="#FF3E93F9" />
		<Setter Property="Foreground" Value="#fff" />
		<Setter Property="Padding" Value="8 3" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<Border
								x:Name="border"
								Background="Transparent"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="#7777">
							<ContentPresenter
									x:Name="content"
									Opacity="1.0"
									Margin="{TemplateBinding Padding}"
									ContentSource="Content"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
						</Border>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="#3777" />
							<Setter TargetName="border" Property="Background" Value="#3fff" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="#3000" />
							<Setter TargetName="border" Property="Background" Value="#3777" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="BorderBrush" Value="#4fff" />
							<Setter TargetName="border" Property="Background" Value="#6fff" />
							<Setter TargetName="content" Property="Opacity" Value="0.9" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--#region ControlStyles-->


	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="Padding" Value="20 4" />
		<Setter Property="Background" Value="#FFECECEC" />
		<Setter Property="Foreground" Value="#FF404040" />
		<Setter Property="BorderBrush" Value="#5000" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border
								x:Name="back"
								Background="{TemplateBinding Background}" />

						<Border
								x:Name="border"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" />

						<Rectangle
								x:Name="effect"
								Fill="Transparent" />

						<ContentPresenter
								x:Name="content"
								ContentSource="Content"
								RecognizesAccessKey="True"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								TextBlock.Foreground="{TemplateBinding Foreground}"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="effect" Property="Fill" Value="#3FFF" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="effect" Property="Fill" Value="#3000" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
							<Setter TargetName="effect" Property="Fill" Value="#0fff" />
							<Setter TargetName="back" Property="Background" Value="#feee" />
							<Setter TargetName="border" Property="BorderBrush" Value="#fbbb" />
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<BulletDecorator
							VerticalAlignment="{TemplateBinding VerticalAlignment}"
							Background="Transparent">
						<BulletDecorator.Bullet>
							<Border
									x:Name="back"
									Width="14" Height="14"
									Background="{x:Static Brushes.White}">

								<Grid>
									<Border
											x:Name="border"
											ClipToBounds="True"
											IsHitTestVisible="False"
											BorderBrush="{DynamicResource CheckBoxBorderBrush}"
											Effect="{StaticResource UIEffectShadow}"
											BorderThickness="1" />

									<Path
											x:Name="CheckMark"
											Visibility="Collapsed"
											Width="10" Height="10"
											SnapsToDevicePixels="False"
											StrokeThickness="2"
											Data="M 1,5 L 4,8 L 9,1"
											Stroke="{DynamicResource AccentColorBrush}" />

									<Rectangle
											x:Name="IndeterminateMark"
											Visibility="Collapsed"
											Width="10" Height="10"
											SnapsToDevicePixels="False"
											Fill="{DynamicResource AccentColorBrush}" />
								</Grid>

							</Border>
						</BulletDecorator.Bullet>

						<ContentPresenter
								x:Name="content"
								Margin="4, 0, 0, 0"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								RecognizesAccessKey="True"
								TextBlock.Foreground="{TemplateBinding Foreground}"/>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".5" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".0" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Unfocused">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="#888" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource CheckBoxPressedBorderBrush}" />
						</Trigger>

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="IndeterminateMark" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="BorderBrush" Value="#BBB" />
							<Setter TargetName="back" Property="Background" Value="#F8F8F8" />
							<Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
							<Setter TargetName="IndeterminateMark" Property="Fill" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
							<Setter TargetName="content" Property="TextBlock.Foreground" Value="{DynamicResource DisabledForeground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="{x:Static Brushes.Transparent}">
						<BulletDecorator.Bullet>
							<Grid>
								<Ellipse
										Width="14" Height="14"
										x:Name="back"
										Fill="{x:Static Brushes.White}" />

								<Ellipse
										x:Name="border"
										Width="14" Height="14"
										Stroke="{DynamicResource CheckBoxBorderBrush}"
										Effect="{StaticResource UIEffectShadow}">
									<Ellipse.Clip>
										<RectangleGeometry RadiusX="15" RadiusY="15" Rect="0 0 15 15" />
									</Ellipse.Clip>
								</Ellipse>

								<Ellipse
										x:Name="RadioMark"
										Visibility="Collapsed"
										Width="6" Height="6" StrokeThickness="0"
										Fill="{DynamicResource AccentColorBrush}" />
							</Grid>
						</BulletDecorator.Bullet>

						<ContentPresenter
								x:Name="content"
								Margin="5 0 0 0"
								VerticalAlignment="Center"
								HorizontalAlignment="Left"
								TextBlock.Foreground="{TemplateBinding Foreground}" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".3" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty=".Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Unfocused">
									<Storyboard>
										<DoubleAnimation
												Storyboard.TargetName="border"
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Stroke" Value="{DynamicResource CheckBoxHoverBorderBrush}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Stroke" Value="{DynamicResource CheckBoxPressedBorderBrush}" />
						</Trigger>

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
							<!--<Setter TargetName="border" Property="Stroke" Value="{DynamicResource AccentColorBrush}" />-->
						</Trigger>

						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
							<!--<Setter TargetName="border" Property="Stroke" Value="{DynamicResource AccentColorBrush}" />-->
						</Trigger>

						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="border" Property="Stroke" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
							<Setter TargetName="back" Property="Fill" Value="{DynamicResource TextBoxDisabledBackground}" />
							<Setter TargetName="RadioMark" Property="Fill" Value="{DynamicResource CheckBoxBulletDisabledBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
		<Setter Property="Padding" Value="2" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{x:Static Brushes.White}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid x:Name="back" Background="{TemplateBinding Background}">
						<Border
								x:Name="border"
								ClipToBounds="True"
								Effect="{StaticResource UIEffectShadow}"
								BorderBrush="{DynamicResource TextBoxBorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" />

						<ScrollViewer
								x:Name="PART_ContentHost"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup>
								<VisualState x:Name="Normal">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Focused">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
						</Trigger>

						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="BorderThickness" Value="0">
							<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
							<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
		<Setter Property="Padding" Value="2" />
		<Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="#fff" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="back" Background="{TemplateBinding Background}">
						<Border
								x:Name="border"
								ClipToBounds="True"
								Effect="{StaticResource UIEffectShadow}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" />

						<ToggleButton
								ClickMode="Press" Focusable="False"
								OverridesDefaultStyle="True"
								Background="{x:Static Brushes.Transparent}"
								IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">

							<ToggleButton.Template>
								<ControlTemplate TargetType="ToggleButton">
									<ContentPresenter ContentSource="Content" />
								</ControlTemplate>
							</ToggleButton.Template>

							<Grid
									Margin="{TemplateBinding BorderThickness}"
									Background="{x:Static Brushes.Transparent}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="auto" />
								</Grid.ColumnDefinitions>

								<ContentPresenter
										x:Name="ContentSite"
										IsHitTestVisible="False"
										VerticalAlignment="Center"
										HorizontalAlignment="Left"
										Margin="{TemplateBinding Padding}"
										Content="{TemplateBinding SelectionBoxItem}"
										ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

								<TextBox
										x:Name="PART_EditableTextBox"
										Style="{StaticResource {x:Type TextBox}}"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Center"
										Margin="{TemplateBinding Padding}"
										Padding="0" Focusable="True"
										Background="{x:Static Brushes.Transparent}"
										Visibility="Hidden"
										BorderThickness="0"
										IsReadOnly="{TemplateBinding IsReadOnly}" />

								<Path
										x:Name="arrow"
										Grid.Column="1"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="4 2"
										Data="{StaticResource DownArrowGeometry}"
										Fill="{TemplateBinding BorderBrush}" />
							</Grid>
						</ToggleButton>

						<Popup
								x:Name="PART_Popup"
								Focusable="False"
								PopupAnimation="Slide"
								AllowsTransparency="True"
								IsOpen="{TemplateBinding IsDropDownOpen}">

							<theme:SystemDropShadowChrome
									x:Name="shadow"
									Color="#71000000"
									Margin="0, 0, 5, 5"
									SnapsToDevicePixels="True">

								<Grid
										x:Name="DropDown"
										SnapsToDevicePixels="True"
										MinWidth="{TemplateBinding ActualWidth}"
										MinHeight="{TemplateBinding ActualHeight}"
										MaxHeight="{TemplateBinding MaxDropDownHeight}">
									<Border
											x:Name="DropDownBorder"
											BorderThickness="1, 0, 1, 1"
											BorderBrush="#aaa"
											Background="White">
										<ScrollViewer SnapsToDevicePixels="True">
											<StackPanel
													IsItemsHost="True"
													KeyboardNavigation.DirectionalNavigation="Contained" />
										</ScrollViewer>
									</Border>
								</Grid>
							</theme:SystemDropShadowChrome>
						</Popup>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup>
								<VisualState x:Name="Normal">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<Storyboard>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Focused">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".3" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="FocusedDropDown">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".3" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource TextBoxHoverBorderBrush}" />
						</Trigger>

						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="IsDropDownOpen" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="BorderThickness" Value="0">
							<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
						</Trigger>

						<Trigger Property="IsEditable" Value="true">
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
							<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid
							x:Name="border"
							Margin="2"
							Background="#12888888">
						<Path 
								x:Name="arrow"
								Fill="#F444"
								VerticalAlignment="Bottom"
								Margin="2.5 4 2 4"
								Data="M-0.5,0 L6,0 L6,1 L-0.5,1  M-0.5,3 L5.5,3 L2.5,6 Z" />
						<ContentPresenter />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="#30888888" />
						</Trigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="#60888888" />
						</Trigger>

						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="border" Property="Background" Value="#FF888888" />
							<Setter TargetName="arrow" Property="Fill" Value="#FFFF" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Cursor" Value="SizeAll" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Rectangle
							Margin="0 2">
						<Rectangle.Fill>
							<DrawingBrush
									TileMode="Tile"
									Viewport="0 0 4 4"
									Viewbox=" 0 0 8 8"
									ViewportUnits="Absolute"
									ViewboxUnits="Absolute">
								<DrawingBrush.Drawing>
									<DrawingGroup>
										<GeometryDrawing
												Brush="#AAA"
												Geometry="M4,4 L4,8 L8,8 L8,4 Z" />
									</DrawingGroup>
								</DrawingBrush.Drawing>
							</DrawingBrush>
						</Rectangle.Fill>
					</Rectangle>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{x:Static Brushes.Transparent}" />
		<Setter Property="Foreground" Value="{x:Static Brushes.Transparent}" />
		<Setter Property="ToolBarTray.IsLocked" Value="True" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<DockPanel>
							<ToggleButton
									x:Name="ToolBarOverflowToggle"
									DockPanel.Dock="Right"
									IsEnabled="{TemplateBinding HasOverflowItems}"
									ClickMode="Press"
									Style="{StaticResource ToolBarOverflowButtonStyle}"
									IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
								<Popup
										x:Name="OverflowPopup"
										AllowsTransparency="True"
										Placement="Bottom"
										StaysOpen="False"
										Focusable="False"
										PopupAnimation="None"
										IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
									<theme:SystemDropShadowChrome
											x:Name="shadow"
											Margin="0 0 5 5" Color="#71000000">
										<Border
												x:Name="DropDownBorder"
												BorderThickness="1"
												Background="#FFF"
												BorderBrush="#666">
											<ToolBarOverflowPanel
													x:Name="PART_ToolBarOverflowPanel"
													Margin="2"
													WrapWidth="200"
													Focusable="True"
													FocusVisualStyle="{x:Null}"
													KeyboardNavigation.TabNavigation="Cycle"
													KeyboardNavigation.DirectionalNavigation="Cycle" />
										</Border>
									</theme:SystemDropShadowChrome>
								</Popup>
							</ToggleButton>

							<Thumb
									x:Name="ToolBarThumb"
									Style="{StaticResource ToolBarThumbStyle}"
									Width="10" />

							<ToolBarPanel
									x:Name="PART_ToolBarPanel"
									IsItemsHost="True" />
						</DockPanel>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="HasOverflowItems" Value="false">
							<Setter TargetName="ToolBarOverflowToggle" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<Trigger Property="IsOverflowOpen" Value="True">
							<Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="True">
							<Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="#000" />
		<Setter Property="Padding" Value="8 4" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border 
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>

						<Border
								x:Name="border"
								Margin="{TemplateBinding BorderThickness}"
								Background="#0000"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter
									x:Name="content"
									Content="{TemplateBinding Content}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									RecognizesAccessKey="True"/>
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="#1000" />
						</Trigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="#2000" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="#08000000" />
							<Setter TargetName="content" Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="#000" />
		<Setter Property="Padding" Value="8 4" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Border 
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>

						<Border
								x:Name="border"
								Margin="{TemplateBinding BorderThickness}"
								Background="#0000"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter
									x:Name="content"
									Content="{TemplateBinding Content}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									RecognizesAccessKey="True"/>
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="#0D000000" />
						</Trigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="#2000" />
						</Trigger>

						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="border" Property="Background" Value="#18000000" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="border" Property="Background" Value="#3000" />
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="#0000" />
							<Setter TargetName="content" Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarDropDownButton" TargetType="{x:Type xctk:DropDownButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="12 2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
					<Grid Name="MainGrid" SnapsToDevicePixels="True">
						<ToggleButton
								x:Name="PART_DropDownButton"
								Padding="{TemplateBinding Padding}"
								Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
								IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
								IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolInverter}}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter
										Content="{TemplateBinding ContentControl.Content}"
										ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
										HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
										RecognizesAccessKey="True"
										VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
								<TextBlock
										Grid.Column="1"
										Name="arrowGlyph"
										Text="&#xf107;"
										Margin="8 3 4 3"
										IsHitTestVisible="False"
										FontSize="12" FontWeight="Bold"
										FontFamily="{StaticResource FontAwesome}"/>
							</Grid>
						</ToggleButton>

						<Popup
								x:Name="PART_Popup"
								HorizontalOffset="0"
								VerticalOffset="0"
								AllowsTransparency="True"
								StaysOpen="False"
								Focusable="False"
								Placement="Bottom"
								SnapsToDevicePixels="True"
								RenderOptions.ClearTypeHint="Auto"
								TextOptions.TextFormattingMode="Display"
								IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}">
							<Border
									Margin="14"
									BorderThickness="1"
									Background="{DynamicResource PopupBackgroundBrush}"
									BorderBrush="{DynamicResource PopupBorderBrush}">
								<Border.Effect>
									<DropShadowEffect
											ShadowDepth="0"
											BlurRadius="14" 
											Color="#FF3C3C3C" 
											Direction="0"
											Opacity="0.3" />
								</Border.Effect>
								<ContentPresenter
											x:Name="PART_ContentPresenter"
											Content="{TemplateBinding DropDownContent}"/>
							</Border>
						</Popup>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}"
				BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

	<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}"
				BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

	<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="#CCC" />
		<Setter Property="Width" Value="1" />
		<Setter Property="Margin" Value="3 4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Rectangle Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}" />

	<Style TargetType="{x:Type app:PlaceHolderTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="PlaceHolderForeground" Value="#888" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type app:PlaceHolderTextBox}">
					<Grid x:Name="back" Background="{TemplateBinding Background}">
						<Border
								x:Name="border"
								ClipToBounds="True"
								Effect="{StaticResource UIEffectShadow}"
								BorderBrush="{DynamicResource TextBoxBorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" />

						<ScrollViewer
								x:Name="PART_ContentHost"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}" />

						<Border
								Margin="2 0"
								x:Name="PART_PlaceHolder"
								IsHitTestVisible="False"
								Visibility="Collapsed">
							<Label
									Foreground="{TemplateBinding PlaceHolderForeground}"
									Margin="{TemplateBinding BorderThickness}"
									Padding="{TemplateBinding Padding}"
									Content="{TemplateBinding PlaceHolder}" />
						</Border>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup>
								<VisualState x:Name="Normal">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".2" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Focused">
									<Storyboard Storyboard.TargetName="border">
										<DoubleAnimation
												Storyboard.TargetProperty="Effect.(DropShadowEffect.Opacity)"
												To=".1" Duration="{StaticResource zeroTime}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsPlaceHolderShown" Value="true">
							<Setter TargetName="PART_PlaceHolder" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxHoverBorderBrush}" />
						</Trigger>

						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
						</Trigger>

						<Trigger Property="BorderThickness" Value="0">
							<Setter TargetName="border" Property="Effect" Value="{StaticResource emptyShadow}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}" />
							<Setter TargetName="back" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Foreground" Value="{DynamicResource TabItemForeground}" />
		<Setter Property="Background" Value="{DynamicResource TabItemBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TabItemBorderBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Border 
							x:Name="border"
							Padding="12 6"
							BorderThickness="1 1 1 1"
							Margin="0 0 -1 0"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter ContentSource="Header" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource TabItemHoverBackground}" />
						</Trigger>

						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="border" Property="BorderThickness" Value="1 1 1 0" />
							<Setter TargetName="border" Property="Background" Value="{DynamicResource TabItemSelectedBackground}" />
						</Trigger>

						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource TabItemSelectedForeground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type TabControl}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="TabStripPlacement" Value="Top" />
		<Setter Property="Background" Value="{DynamicResource TabControlBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TabControlBorderBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<DockPanel Background="{TemplateBinding Background}">
						<Grid DockPanel.Dock="Top">
							<Border
									BorderThickness="0 0 0 1"
									Background="#2000"
									BorderBrush="{TemplateBinding BorderBrush}" />

							<TabPanel
									x:Name="HeaderPanel"
									Margin="4 4 4 0"
									IsItemsHost="True"
									KeyboardNavigation.TabIndex="1"
									Background="{x:Static Brushes.Transparent}" />
						</Grid>

						<Border
								Background="{TemplateBinding Background}"
								KeyboardNavigation.TabNavigation="Local"
								KeyboardNavigation.DirectionalNavigation="Contained"
								KeyboardNavigation.TabIndex="2">
							<ContentPresenter 
									Margin="0"
									x:Name="PART_SelectedContentHost" 
									ContentSource="SelectedContent"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}" />
	</Style>

	<!--#endregion-->

	<Style x:Key="NoHeaderTabControlStyle" TargetType="{x:Type TabControl}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="SelectedIndex" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Border
							Background="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter
								x:Name="PART_SelectedContentHost"
								ContentSource="SelectedContent" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Thickness x:Key="BottomThickness" Bottom="1" />

	<ItemContainerTemplate x:Key="ItemsContainerStyle">
		<VirtualizingStackPanel />
	</ItemContainerTemplate>

	<Style x:Key="ToolBarBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
		<Setter Property="BorderThickness" Value="{StaticResource BottomThickness}" />
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource ToolBarForeground}" />
	</Style>

	<Style x:Key="BoxItemBase" TargetType="{x:Type ListBoxItem}">
		<Setter Property="Padding" Value="0" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="#000" />
		<Setter Property="BorderBrush" Value="#f0f0f0" />
		<Setter Property="BorderThickness" Value="0 0 0 1" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalAlignment}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="#f4f4f4" />
							<Setter TargetName="border" Property="BorderBrush" Value="#ccc" />
						</Trigger>

						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="border" Property="Background" Value="#efefef" />
							<Setter TargetName="border" Property="BorderBrush" Value="#aaa" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource BoxItemBase}">
		<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}" />
	</Style>

	<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource BoxItemBase}">
		<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}" />
	</Style>

	<Style TargetType="{x:Type app:ListBoxItemEx}" BasedOn="{StaticResource BoxItemBase}">
		<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}" />
	</Style>

	<Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource BoxItemBase}">
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="4 2" />
	</Style>

	<Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
		<Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
		<Setter Property="BorderThickness" Value="{DynamicResource BottomThickness}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ToolBarBorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource ToolBarForeground}" />
	</Style>

</ResourceDictionary>